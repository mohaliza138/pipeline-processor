DEPTH = 256; -- The size of memory in words 
WIDTH = 16; -- The size of data in bits 
ADDRESS_RADIX = DEC; -- The radix for address values 
DATA_RADIX = BIN; -- The radix for data values 
CONTENT -- start of (address : data pairs) 

BEGIN
1 : 0111000001111100;  --lb r1 r0 F1
2 : 0111000001111100;  --lb r1 r0 F1
3 : 0111000010111101;  --lb r2 r0 F2
4 : 0111000010111101;  --lb r2 r0 F2
5 : 0111000110111110;  --lb r6 r0 E
6 : 0111000110111110;  --lb r6 r0 E
7 : 0100001100000111;  --andi r4 r1 000111 //
8 : 0100010101000111;  --andi r5 r2 000111 //
9 : 0000001110011010;  --and r3 r1 r6//
10 : 0000010110111010;  --and r7 r2 r6//
11 : 1001011110000001;  --bnq r6 r3 1
12 : 1110000010011000;  --j end
13 : 1001111110000001;  --bnq r6 r7 1
14 : 1110000010011000;  --j end
15 : 1000000011000010;  --beq r0 r3 2  //
16 : 0101100100001000;  --ori r4 r4 001000//
17 : 1110000000010011;  --j denormal1
18 : 0010011011001000;  --addi r3 r3 001000//
19 : 1000000111000010;  --denormal1: beq r0 r7 2  //
20 : 0101101101001000;  --ori r5 r5 001000//
21 : 1110000000010111;  --j denormal2
22 : 0010111111001000;  --addi r7 r7 001000//
23 : 0000011111011001;  --denormal2: sub r3 r3 r7 //
24 : 1000011000001100;  --Start:  beq r3 r0 12
25 : 0111000110111111;  --lb r6 r0 S
26 : 0111000110111111;  --lb r6 r0 S
27 : 0000110011111010;  --and r7 r6 r3
28 : 1000000111000111;  --beq r0 r7 state1
29 : 0000000011011001;  --sub r3  r0 r3
30 : 0010100111000000;  --addi r7 r4 0
31 : 0010101100000000;  --addi r4 r5 0
32 : 0010111101000000;  --addi r5 r7 0
33 : 0010001111000000;  --addi r7 r1 0
34 : 0010010001000000;  --addi r1 r2 0
35 : 0010111010000000;  --addi r2 r7 0
36 : 0000101011101100;  --state1: sr r5 r5 r3
37 : 0111000110111111;  --lb r6 r0 S
38 : 0111000110111111;  --lb r6 r0 S
39 : 0000001110001010;  --and r1 r1 r6
40 : 0000010110010010;  --and r2 r2 r6
41 : 1000000001000001;  --beq r0 r1 S2
42 : 0000000100100001;  --sub r4 r0 r4
43 : 1000000010000001;  --S2:  beq r0 r2 Start
44 : 0000000101101001;  --sub r5 r0 r5
45 : 0000100101110000;  --adding: add r6 r4 r5
46 : 1001110000000001;
47 : 1110000010101001;
48 : 0111000001111111;  --lb  r1 r0 S
49 : 0111000001111111;  --lb  r1 r0 S
50 : 0000001110010010;  --and r2 r1 r6
51 : 0000001001001101;  --xor r1 r1 r1
52 : 1000000010000010;  --beq r2 r0 make_result
53 : 0010010001000000;  --addi r1 r2 0
54 : 0000000110110001;  --sub r6 r0 r6
55 : 0010000010000001;  --make_result: addi r2 r0 1
56 : 0000011011011101;  --xor r3 r3 r3
57 : 0000010110100010;  --my_loop: and r4 r6 r2
58 : 1000000100000010;  --beq r0 r4 continue
59 : 0010011101000000;  --addi r5 r3 0
60 : 0010010111000000;  --addi r7 r2 0
61 : 0000010010010000;  --continue:  add r2 r2 r2
62 : 0010011011001000;  --addi r3 r3 8
63 : 1001000010111001;  --bnq r0 r2 my_loop
64 : 0010000100011000;  --addi r4 r0 24
65 : 0000101100100001;  --sub r4 r5 r4
66 : 0100110010111000;  --andi r2 r6 111000
67 : 1001000010000001;  -- bnq r0 r2 1
68 : 1110000001110001;  -- j check_normal
69 : 0000110100110100;  -- sr r6 r6 r4
70 : 0100110110110111;  --andi r6 r6 8';
71 : 0000100110110011;  --compute_exponent: or r6 r6 r4
72 : 0111000111111100;  --lb r7 r0 F1
73 : 0111000111111100;  --lb r7 r0 F1
74 : 0111000010111101;  --lb r2 r0 F2
75 : 0111000010111101;  --lb r2 r0 F2
76 : 0111000011111110;  --lb r3 r0 E
77 : 0111000011111110;  --lb r3 r0 E
78 : 0000111011100010;  --and r4 r7 r3
79 : 0000010011101010;  --and r5 r2 r3
80 : 1001000101000001; -- bnq r5 r0 1
81 : 0010000101001000; -- addi r5 r0 8
82 : 1001000100000001; -- bnq r4 r0 1
83 : 0010000100001000; -- addi r4 r0 8
84 : 0000100101010001;  --sub r2 r4 r5
85 : 0111000111111111;  --lb r7 r0 S
86 : 0111000111111111;  --lb r7 r0 S
87 : 0000111010111010;  --and r7 r7 r2
88 : 1000000111001100;  --beq r7 r0 second_pow
89 : 0000110101111000;  --add r7 r6 r5
90 : 0111000010111111;  --lb r2 r0 S
91 : 0111000010111111;  --lb r2 r0 S
92 : 0000010111010010;  --and r2 r2 r7
93 : 1000010000000100;  --beq r2 r0 aa
94 : 0111000110111110;  --lb r6 r0 E
95 : 0111000110111110;  --lb r6 r0 E
96 : 0000110001110011;  --or r6 r6 r1
97 : 1110000011000000;  --j exit
98 : 0000110101110000;  --aa: add r6 r6 r5
99 : 0000110001110011;  --or r6 r6 r1
100 : 1110000011000000;  --j exit
101 : 0000110100111000;  --second_pow: add r7 r6 r4
102 : 0111000010111111;  --lb r2 r0 S
103 : 0111000010111111;  --lb r2 r0 S
104 : 0000010111010010;  --and r2 r2 r7
105 : 1000010000000100;  --beq r2 r0 bb
106 : 0111000110111110;  --lb r6 r0 E
107 : 0111000110111110;  --lb r6 r0 E
108 : 0000110001110011;  --or r6 r6 r1
109 : 1110000011000000;  --j exit
110 : 0000110100110000;  --bb: add r6 r6 r4
111 : 0000110001110011;  --or r6 r6 r1
112 : 1110000011000000;  --j exit
113 : 0111000111111110;  --check_normal: lb r7 r0 F1
114 : 0111000111111100;  --lb r7 r0 F1
115 : 0111000111111100;  --lb r7 r0 F1
116 : 0111000010111101;  --lb r2 r0 F2
117 : 0111000010111101;  --lb r2 r0 F2
118 : 0111000011111110;  --lb r3 r0 E
119 : 0111000011111110;  --lb r3 r0 E
120 : 0010011101000000;  --addi r5 r3 0
121 : 0000111011011010;  --and r3 r7 r3
122 : 0000010101101010;  --and r5 r2 r5
123 : 1001000101000001; -- bnq r5 r0 1
124 : 0010000101001000; -- addi r5 r0 8
125 : 1001000011000001; -- bnq r3 r0 1
126 : 0010000011001000; -- addi r3 r0 8
127 : 0000011101010001;  --sub r2 r3 r5
128 : 0111111000111111;  --lb r7 r0 S
129 : 0111111000111111;  --lb r7 r0 S
130 : 0000111010111010;  --and r7 r7 r2
131 : 1000111000000001;  --beq r7 r0 pow2
132 : 1110000010000110;  --j check
133 : 0010011101000000;  --pow2: addi r5 r3 0
134 : 0000101100010000;  -- check: add r2 r5 r4
135 : 1000010000001011;  --beq r2 r0 denormal
136 : 0111000111111111;  --lb r7 r0 S
137 : 0111000111111111;  --lb r7 r0 S
138 : 0000111010111010;  --and r7 r7 r2
139 : 1001000111000111;  --bnq r7 r0 make_zero
140 : 0101010010000001;  --ori r2 r2 1
141 : 0000110010110100;  --sl r6 r6 r2
142 : 0100110110110111;  --andi r6 r6 110111
143 : 0100010010111110;  --andi r2 r2 111110
144 : 0000110010110011;  --or r6 r2 r6
145 : 0000110001110011;  --or r6 r1 r6
146 : 1110000011000000;  --j exit
147 : 0011101101000111;  --make_zero: subi r5 r5 7
148 : 0000110101110100;  --sl r6 r6 r5
149 : 0100110110000111;  --andi r6 r6 000111;
150 : 0000110001110011;  --or r6 r6 r1
151 : 1110000011000000;  --j exit
152 : 0111000001111100;  --lb r1 r0 F1
153 : 0111000001111100;  --lb r1 r0 F1
154 : 0111000010111101;  --lb r2 r0 F2
155 : 0111000010111101;  --lb r2 r0 F2
156 : 0111000101111110;  --lb r5 r0 E
157 : 0111000101111110;  --lb r5 r0 E
158 : 0000000001110000;
159 : 0000101001111010;
160 : 1000111101000001;
161 : 0000000010110000;
162 : 0000001010111011;
163 : 0100111111000111;
164 : 1001111000000011;
165 : 0000010001111101;
166 : 1000000111000001;
167 : 0010000110111110;
168 : 1110000011000000;  --j exit
169 : 0010000110000000;
END;